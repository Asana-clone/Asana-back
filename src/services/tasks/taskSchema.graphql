type Task {
  id: Int!
  title:String!
  desc: String
  startDate:String
  dueDate: String
  type:String
  status:String
  process:String
  priority:String
  likeNum:Int
  user: User
  createdAt: String
  updatedAt: String
  comments: [Comment]
  tagRelations: [TagRelation]
}

type Comment {
  id: Int!
  contents: String
  user: User
  createdAt: String
}

type TagRelation{
  id: Int!
  tag: Tag
}

type Tag {
  id: Int!
  name: String
  color: String
}

type getTaskResult {
  statuscode: Int!
  task: Task
  err: String
}

type Query {
  getTaskDetail(id: Int!): getTaskResult!
}

type Mutation {
  createTask(input:TaskInput!): Result!
  updateTask(input:TaskInput!): Result!
  deleteTask(id: Int!): Result!
  likeTask(id: Int!, user: Int!): getTaskResult!
  createTag(taskId: Int!, name: String!, color: String!): Result!
  deleteTag(id: Int): Result!
}
input TaskInput {
  id:Int
  sectionId: Int!
  title: String!
  desc: String
  userId: Int
  startDate: String
  dueDate: String
  status: String
  type: String
  process: String
  priority: String
}